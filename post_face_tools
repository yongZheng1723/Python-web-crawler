import requests
#from io import BytesIO
from bs4 import BeautifulSoup
from skimage import io
import numpy as np

def get_img_link(movie_link):
    #通过电影的链接爬取海报的链接
    r=requests.get(movie_link)
    movie_html=r.text
    #movie_html.encoding=movie_html.apparent_encoding
    movie_html_obj=BeautifulSoup(movie_html,'html.parser',from_encoding='utf-8')
     # 获取海报小图的链接
    small_poster_img_link = movie_html_obj.find('div', class_='poster').find('img')['src']

    # 获取海报大图的链接
    big_poster_img_link = small_poster_img_link[:small_poster_img_link.find('._V1_') + 4] + '.jpg'

    return big_poster_img_link

def get_n_face(movie_link):
    #通过图像链接获取包含的人脸个数
    print('正在处理链接：',movie_link)
    img_link=get_img_link(movie_link)
    
    subscription_key='ce039dfde4aa44cb81bbb793ec08f855'
    assert subscription_key
    face_api_url='https://westcentralus.api.cognitive.microsoft.com/face/v1.0/detect'
    image_url=img_link
    headers = { 'Ocp-Apim-Subscription-Key': subscription_key }
    params = {
      'returnFaceId': 'true',
      'returnFaceLandmarks': 'false',
      'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
     }
    n_face=-1
    try:
        response = requests.post(face_api_url, params=params, headers=headers, json={"url": image_url})
        faces = response.json()
        n_face=len(faces)
        print('人脸个数：',n_face)
    except:
        print('无效图片')
    return n_face

def round_to_int(x,base=10):
    #将数字转换到最近的整数
    return(int(base*round(float(x)/base)))

def get_color_mean(movie_link):
    #通过图像链接获得其平均像素值
    print('正在处理链接：', movie_link)
    img_link = get_img_link(movie_link)
    #response = requests.get(img_link)
    #image = Image.open(BytesIO(response.content))
    image = io.imread(img_link)
    int_mean_color=round_to_int(np.mean(image))
    print('像素均值：',int_mean_color)
    return int_mean_color
